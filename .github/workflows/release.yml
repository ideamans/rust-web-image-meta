name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  publish:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable
    
    - name: Get version from tag
      id: get_tag_version
      run: echo "TAG_VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Get version from Cargo.toml
      id: get_cargo_version
      run: |
        VERSION=$(grep -m1 '^version' Cargo.toml | cut -d'"' -f2)
        echo "CARGO_VERSION=$VERSION" >> $GITHUB_OUTPUT
    
    - name: Verify versions match
      run: |
        if [ "${{ steps.get_tag_version.outputs.TAG_VERSION }}" != "${{ steps.get_cargo_version.outputs.CARGO_VERSION }}" ]; then
          echo "Error: Tag version (${{ steps.get_tag_version.outputs.TAG_VERSION }}) does not match Cargo.toml version (${{ steps.get_cargo_version.outputs.CARGO_VERSION }})"
          echo "Please update the version in Cargo.toml to match the tag"
          exit 1
        fi
        echo "Version check passed: v${{ steps.get_cargo_version.outputs.CARGO_VERSION }}"
    
    - name: Check package
      run: cargo package --verbose --allow-dirty
    
    - name: Run tests before publish
      run: cargo test --verbose
    
    - name: Publish to crates.io
      run: cargo publish --allow-dirty
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: publish
    steps:
    - uses: actions/checkout@v4
    
    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Extract release notes
      id: extract_notes
      run: |
        VERSION=${{ steps.get_version.outputs.VERSION }}
        # Extract release notes from CHANGELOG.md if it exists
        if [ -f CHANGELOG.md ]; then
          NOTES=$(sed -n "/## \[$VERSION\]/,/## \[/p" CHANGELOG.md | sed '1d;$d')
          echo "NOTES<<EOF" >> $GITHUB_OUTPUT
          echo "$NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "NOTES=Release version $VERSION" >> $GITHUB_OUTPUT
        fi
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        name: Release ${{ steps.get_version.outputs.VERSION }}
        body: ${{ steps.extract_notes.outputs.NOTES }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}